#include "{{module_name}}.h"
#include "pg_typing.h"
#include <stdint.h>

/*
    Autogenerated driver for configuring type:
    {{repr(dtype)}}
*/

{% for r in regs -%}
#define {{r['path'].upper()}}_OFFSET ({{"%3s" % r['offset']}})
#define {{r['path'].upper()}}_WIDTH  ({{"%3s" % r['width']}})
{% endfor -%}

{% for r in regs -%}

void {{module_name}}_{{r['path']}}_pset(uint_fast32_t* cmd, void* pval) {
  {% if len(r['ctrl']) > 0 %}
    {{module_name}}_{{r['ctrl'][0]['path']}}_set(cmd, {{r['ctrl'][0]['val']}});
  {% endif %}
    pg_typing_set(cmd, pval, {{r['path'].upper()}}_OFFSET, {{r['path'].upper()}}_WIDTH);
}

void {{module_name}}_{{r['path']}}_uset(uint_fast32_t* cmd, uint_fast32_t val) {
    {{module_name}}_{{r['path']}}_pset(cmd, &val);
}

uint_fast32_t {{module_name}}_{{r['path']}}_uget(uint_fast32_t* cmd) {
    return pg_typing_get_word(cmd, {{r['path'].upper()}}_WIDTH, {{r['path'].upper()}}_OFFSET);
}

{% if typeof(r['type'], Fixp) %}
void {{module_name}}_{{r['path']}}_fset(uint_fast32_t* cmd, float val) {
	{{module_name}}_{{r['path']}}_uset(cmd, val * (1L << {{ r['type'].fract }}));
}
{% endif %}

{% endfor -%}
