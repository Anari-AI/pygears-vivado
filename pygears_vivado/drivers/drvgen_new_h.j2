/*
    Autogenerated driver for "{{module_name}}" module
*/

#ifndef {{module_name.upper()}}_H
#define {{module_name.upper()}}_H

#include "pgaxi.h"

typedef struct {
	unsigned device_id;
{% for name, p in intfdef.items() %}
  {% if p.t == 'axidma' %}
	  uintptr_t {{name}}_ctrl_baseaddr;
  {% elif p.t == 'axi' %}
	  uintptr_t {{name}}_baseaddr;
  {% endif %}
{% endfor %}
} {{module_name}}_Config;

typedef struct{
{% for name, p in intfdef.items() %}
  {% if p.t == 'axidma' %}
    pgaxi {{name}}_ctrl_h;
  {% elif p.t == 'axi' %}
    pgaxi {{name}}_h;
  {% endif %}
{% endfor %}
} {{module_name}};

int {{module_name}}_init_cfg({{module_name}}* h, {{module_name}}_Config* cfg);

int {{module_name}}_init({{module_name}}* h, unsigned device_id);

{% for name, p in intfdef.items() if p.t == 'axidma'%}
  {% if 'rdata' in p.comp %}
void {{module_name}}_{{name}}_send({{module_name}}* h, const void* data, size_t len);
  {% endif %}
  {% if 'wdata' in p.comp %}
void {{module_name}}_{{name}}_recv({{module_name}}* h, void* data, size_t len);
  {% endif %}
{% endfor %}

{% for name, p in intfdef.items() if p.t == 'axi' and 'r' in p.direction %}
  {% set width = p.comp['rdata'].params['rdata'] %}
  {% if width < 64 %}
    {% if p.comp['araddr'].port %}
uint{{width}}_t {{module_name}}_{{name}}_read({{module_name}}* h, uintptr_t addr);
    {% else %}
uint{{width}}_t {{module_name}}_{{name}}_read({{module_name}}* h);
    {% endif %}
  {% endif %}
{% endfor %}

{% for name, p in intfdef.items() if p.t == 'axi' and 'w' in p.direction %}
  {% set width = p.comp['wdata'].params['wdata'] %}
  {% if width < 64 %}
    {% if p.comp['awaddr'].port %}
void {{module_name}}_{{name}}_write({{module_name}}* h, uint{{width}}_t val, uintptr_t addr);
    {% else %}
void {{module_name}}_{{name}}_write({{module_name}}* h, uint{{width}}_t val);
    {% endif %}
  {% endif %}
{% endfor %}

#endif
