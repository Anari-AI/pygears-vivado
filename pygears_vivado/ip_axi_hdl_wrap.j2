{%- import 'snippet.j2' as snippet -%}

{% set dma_en = False %}
{% set bram_en = False %}
{% for p in ports.values() %}
{% set dma_en = (p["type"] == "axi" or dma_en) %}
{% set bram_en = (p["type"] in ["bram", "bram.req"] or bram_en) %}
{% endfor %}

{# {% set axi_din = ports['din'] %} #}
{# {% set axi_dout = ports['dout'] %} #}
{# {% set axi_din_type = axi_din['type'] %} #}
{# {% set axi_dout_type = axi_dout['type'] %} #}

{% set axi_lite_cfg = dma_en %}
{# {% set din = intfs[0] %} #}
{# {% set dout = intfs[1] %} #}

module {{wrap_module_name}}
(
    input         aresetn,
    input         aclk,
{{ port_def|join(",\n")|indent(4, True)}}
);

{% for p in ports.values() %}
  {% if p["type"] == "axi" %}
    {% if p["direction"] == "in" %}
   logic                   mm2s_introut;
   logic                   mm2s_prmry_reset_out_n;

   logic [{{ceil_div(p['width'], 8) - 1}}:0]      m_axis_mm2s_tkeep;
   logic                  m_axis_mm2s_tlast;
   {% else %}
   logic                   s2mm_prmry_reset_out_n;
   logic                   s2mm_introut;

   logic [{{ceil_div(p['width'], 8) - 1}}:0]     s_axis_s2mm_tkeep;
   logic                   s_axis_s2mm_tlast;
   {% endif %}
 {% endif %}
{% endfor %}

{{snippet.intf_list_inst(intfs.values())|indent(4, True)}}

{% for p in ports.values() %}
  {% if p["type"] == "axi" %}
    {% if p["direction"] == "out" %}
      {% if axi_dout['w_eot'] == 0 %}
   assign s_axis_s2mm_tlast = 1;
      {% else %}
   assign s_axis_s2mm_tlast = &{{dout['name']}}.data[{{dout['w_data']}}+:{{dout['w_eot']}}];
      {% endif %}
   assign s_axis_s2mm_tkeep = '1;
    {% endif %}

  {% elif p["type"] == "axis" %}
    {% if p["direction"] == "in" %}
{{ snippet.signal_intf_connect([intfs[p["name"]]])|indent(4, True)}}
    {% else %}
      {% set dout = intfs[p['name']] %}
      {% if dout['w_eot'] == 0 %}
assign {{dout['name']}}_tdata = {{dout['name']}}.data;
      {% else %}
assign {{dout['name']}}_tdata = {{dout['name']}}.data[{{dout['w_data']-1}}:0];
assign {{dout['name']}}_tlast = &{{dout['name']}}.data[{{dout['w_data']}}+:{{dout['w_eot']}}];
      {% endif %}
assign {{dout['name']}}_tvalid = {{dout['name']}}.valid;
assign {{dout['name']}}.ready = {{dout['name']}}_tready;
    {% endif %}
  {% endif %}
{% endfor %}

{% if dma_en %}
   logic [31:0]            axi_dma_tstvec;

   dtidma dtidma_i (
  {% if axi_din_type == "axi" %}
                    .m_axis_mm2s_tdata({{din['name']}}.data[{{axi_din['w_data']-1}}:0]),
                    .m_axis_mm2s_tkeep(m_axis_mm2s_tkeep),
                    .m_axis_mm2s_tvalid({{din['name']}}.valid),
                    .m_axis_mm2s_tready({{din['name']}}.ready),
                    .m_axis_mm2s_tlast(m_axis_mm2s_tlast),
  {% endif %}
  {% if axi_dout_type == "axi" %}
                    .s_axis_s2mm_tdata({{dout['name']}}.data[{{axi_dout['w_data']-1}}:0]),
                    .s_axis_s2mm_tvalid({{dout['name']}}.valid),
                    .s_axis_s2mm_tready({{dout['name']}}.ready),
                    .s_axis_s2mm_tlast(s_axis_s2mm_tlast),
  {% endif %}
                    .axi_resetn(aresetn),
                    .*
                    );
{% endif %}

{% for p in ports.values() %}
  {% if p["type"] == "bram" or p["type"] == "bram.req" %}

    {% set bram_din = intfs[p["name"]] %}
    {% set bram_dout = p["resp"] if "resp" in p else None %}

    logic [14:0] bram_addr_a;
    logic [31:0] bram_rd_data;
    logic [31:0] bram_wr_data;
    logic bram_we_a;

    {% if bram_dout %}
      assign bram_rd_data = {{bram_dout['name']}}.data;
      assign {{bram_din['name']}}.data[{{p['w_addr']}}+:{{p['w_data']}}] = bram_wr_data;
      assign {{bram_din['name']}}.data[{{p['w_addr'] + p['w_data']}}] = bram_we_a;
    {% else %}
      assign bram_wr_data = {{bram_din['name']}}.data[{{p['w_addr']}}+:{{p['w_data']}}];
      assign bram_rd_data = bram_wr_data;
    {% endif %}

   assign {{bram_din['name']}}.data[{{p['w_addr']-1}}:0] = bram_addr_a[{{p['w_addr']-1+2}}:2];
   dtibram_{{p["name"]}} dtibram_{{p["name"]}}_i (
                    .s_axi_aclk(aclk),
                    .s_axi_aresetn(aresetn),
                    .bram_en_a({{bram_din['name']}}.valid),
                    .bram_we_a(bram_we_a),
                    .bram_addr_a(bram_addr_a),
                    .bram_rddata_a(bram_rd_data),
                    .bram_wrdata_a(bram_wr_data),
                    .bram_clk_a(),
                    .bram_rst_a(),
{{axi_intfs.port_map(axi_intfs.AXI_SLAVE, p["name"], "s_axi", waddr=p['w_addr'],
    wdata={
        'wdata': 32,
        'wstrb': 4
    },
    bresp=True,
    raddr=32,
    rdata=32)|join(",\n")|indent(19, True)}}
                    );
  {% endif %}
{% endfor %}


{{snippet.module_inst(module_name, param_map, inst_name, sig_map={'clk': pg_clk, 'rst': '~aresetn'})|indent(4, True)}}

endmodule
