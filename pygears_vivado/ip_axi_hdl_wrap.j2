{%- import 'snippet.j2' as snippet -%}

{% set axi_din = dma_ports.get('din', None) %}
{% set axi_dout = dma_ports.get('dout', None) %}
{% set din = intfs[0] %}
{% set dout = intfs[1] %}

module {{wrap_module_name}}
(
    input         s_axi_lite_aclk,
    input         axi_resetn,
    input         s_axi_lite_awvalid,
    output        s_axi_lite_awready,
    input [9:0]   s_axi_lite_awaddr,
    input         s_axi_lite_wvalid,
    output        s_axi_lite_wready,
    input [31:0]  s_axi_lite_wdata,
    output [1:0]  s_axi_lite_bresp,
    output        s_axi_lite_bvalid,
    input         s_axi_lite_bready,
    input         s_axi_lite_arvalid,
    output        s_axi_lite_arready,
    input [9:0]   s_axi_lite_araddr,
    output        s_axi_lite_rvalid,
    input         s_axi_lite_rready,
    output [31:0] s_axi_lite_rdata,
    output [1:0]  s_axi_lite_rresp,
{% if axi_din %}
    input         m_axi_mm2s_aclk,
    output [31:0] m_axi_mm2s_araddr,
    output [7:0]  m_axi_mm2s_arlen,
    output [2:0]  m_axi_mm2s_arsize,
    output [1:0]  m_axi_mm2s_arburst,
    output [2:0]  m_axi_mm2s_arprot,
    output [3:0]  m_axi_mm2s_arcache,
    output        m_axi_mm2s_arvalid,
    input         m_axi_mm2s_arready,
    input [{{axi_din['width'] - 1}}:0] m_axi_mm2s_rdata,
    input [1:0]   m_axi_mm2s_rresp,
    input         m_axi_mm2s_rlast,
    input         m_axi_mm2s_rvalid,
    output        m_axi_mm2s_rready,
{% else %}
{{snippet.signal_intf_list([din])|indent(4, True)}},
{% endif %}

{% if axi_dout %}
    input         m_axi_s2mm_aclk,
    output [31:0] m_axi_s2mm_awaddr,
    output [7:0]  m_axi_s2mm_awlen,
    output [2:0]  m_axi_s2mm_awsize,
    output [1:0]  m_axi_s2mm_awburst,
    output [2:0]  m_axi_s2mm_awprot,
    output [3:0]  m_axi_s2mm_awcache,
    output        m_axi_s2mm_awvalid,
    input         m_axi_s2mm_awready,
    output [{{axi_dout['width'] - 1}}:0] m_axi_s2mm_wdata,
    output [3:0]  m_axi_s2mm_wstrb,
    output        m_axi_s2mm_wlast,
    output        m_axi_s2mm_wvalid,
    input         m_axi_s2mm_wready,
    input [1:0]   m_axi_s2mm_bresp,
    input         m_axi_s2mm_bvalid,
    output        m_axi_s2mm_bready
{% else %}
  {% if dout['w_eot'] > 0 %}
    input          {{dout['name']}}_tready,
    output         {{dout['name']}}_tvalid,
    output [{{((dout['w_data']+7)//8)*8-1}}:0] {{dout['name']}}_tdata,
    output         {{dout['name']}}_tlast
  {% endif %}
{% endif %}

);
   logic [31:0]            axi_dma_tstvec;

{% if axi_din %}
   logic                   mm2s_introut;
   logic                   mm2s_prmry_reset_out_n;

   logic [{{ceil_div(axi_din['width'], 8) - 1}}:0]      m_axis_mm2s_tkeep;
   logic                  m_axis_mm2s_tlast;
{% endif %}

{% if axi_dout %}
   logic                   s2mm_prmry_reset_out_n;
   logic                   s2mm_introut;

   logic [{{ceil_div(axi_dout['width'], 8) - 1}}:0]     s_axis_s2mm_tkeep;
   logic                   s_axis_s2mm_tlast;
{% endif %}

{{snippet.intf_list_inst(intfs)|indent(4, True)}}

{% if axi_dout %}
  {% if axi_dout['w_eot'] == 0 %}
   assign s_axis_s2mm_tlast = 1;
  {% else %}
   assign s_axis_s2mm_tlast = &{{dout['name']}}.data[{{dout['w_data']}}+:{{dout['w_eot']}}];
  {% endif %}
   assign s_axis_s2mm_tkeep = '1;
{% endif %}

{% if not axi_din %}
{{ snippet.signal_intf_connect([din])|indent(4, True)}}
{% endif %}

{% if not axi_dout %}
  {% if dout['w_eot'] == 0 %}
assign {{dout['name']}}_tdata = {{dout['name']}}.data;
  {% else %}
assign {{dout['name']}}_tdata = {{dout['name']}}.data[{{dout['w_data']-1}}:0];
assign {{dout['name']}}_tlast = &{{dout['name']}}.data[{{dout['w_data']}}+:{{dout['w_eot']}}];
  {% endif %}
assign {{dout['name']}}_tvalid = {{dout['name']}}.valid;
assign {{dout['name']}}.ready = {{dout['name']}}_tready;
{% endif %}


   dtidma dtidma_i (
{% if axi_din %}
                    .m_axis_mm2s_tdata({{din['name']}}.data[{{axi_din['w_data']-1}}:0]),
                    .m_axis_mm2s_tkeep(m_axis_mm2s_tkeep),
                    .m_axis_mm2s_tvalid({{din['name']}}.valid),
                    .m_axis_mm2s_tready({{din['name']}}.ready),
                    .m_axis_mm2s_tlast(m_axis_mm2s_tlast),
{% endif %}
{% if axi_dout %}
                    .s_axis_s2mm_tdata({{dout['name']}}.data[{{axi_dout['w_data']-1}}:0]),
                    .s_axis_s2mm_tvalid({{dout['name']}}.valid),
                    .s_axis_s2mm_tready({{dout['name']}}.ready),
                    .s_axis_s2mm_tlast(s_axis_s2mm_tlast),
{% endif %}
                    .*
                    );


{{snippet.module_inst(module_name, param_map, inst_name, sig_map={'clk': 's_axi_lite_aclk', 'rst': '~axi_resetn'})|indent(4, True)}}

endmodule
